/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Uber;
import Business.UberDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rohan
 */
public class ManageCarJPanel extends javax.swing.JPanel {
    private JPanel bottomPanel;
    private UberDirectory uberDirectory;
    private ArrayList<Uber> carList;
    /**
     * Creates new form ManageCarJPanel
     */
    public ManageCarJPanel(JPanel bottomPanel, UberDirectory uberDirectory) {
        initComponents();
        this.bottomPanel = bottomPanel;
        this.uberDirectory = uberDirectory;
        this.carList = carList;
        populateTable(uberDirectory, "ff");
        
       // populate(carList);
    }

        
        /*
        public void populate(UberDirectory uberDirectory, String all) {
        DefaultTableModel dtm = (DefaultTableModel) tblCar.getModel();
        dtm.setRowCount(0);
        for(uber.getCarBrand().equals(all) || all.equals("all"))
        {
            Object[] row = new Object[13];
            row[0] = uber;
            row[1] = uber.getCarBrand();
            row[2] = uber.getCarManufacturer();
            row[3] = uber.getCarManufacYear();
            row[4] = uber.getCarMinSeats();
            row[5] = uber.getCarMaxSeats();
            row[6] = uber.getCarSerialNum();
            row[7] = uber.getCarModelNum();
            row[8] = uber.getCarAvailableCity();
            row[9] = uber.getCarManufacturer();
            row[10] = uber.isCarAvailability();
            row[11] = uber.isCarMaintenanceCertificate();
            
            dtm.addRow(row);
         }
    }
*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCar = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnViewCar = new javax.swing.JButton();
        btnDeleteCar = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 36)); // NOI18N
        jLabel1.setText("Manage Car");

        tblCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Brand", "Manufacturer", "Manu. Year", "Min. Seats", "Max Seats", "Serial Num", "Model Num", "City", "Manufacturer", "Availability", "Certificate?"
            }
        ));
        jScrollPane1.setViewportView(tblCar);

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewCar.setText("View");
        btnViewCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarActionPerformed(evt);
            }
        });

        btnDeleteCar.setText("Delete");
        btnDeleteCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(btnViewCar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnDeleteCar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewCar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteCar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(96, 96, 96))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblCar.getSelectedRow();
        if(selectedRow >=0){
             int dialogButton = JOptionPane.YES_NO_OPTION;
             int dialogResult = JOptionPane.showConfirmDialog(null,"Would you like to delete the Uber details?","Warning",dialogButton);
             if(dialogResult == JOptionPane.YES_OPTION){
                 Uber uber = (Uber) tblCar.getValueAt(selectedRow, 0);
                 uberDirectory.deleteCar(uber);
                 populateTable(uberDirectory.getCarList());
             }
        }else{
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
      
    }//GEN-LAST:event_btnDeleteCarActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        bottomPanel.remove(this);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.previous(bottomPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCar.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            Uber uber = (Uber) tblCar.getValueAt((selectedRow), 0);
            ViewCarJPanel viewpanel = new ViewCarJPanel(bottomPanel, uber);
            bottomPanel.add("viewPanel",viewpanel);
            CardLayout layout = (CardLayout) bottomPanel.getLayout();
            layout.next(bottomPanel);
        }
        
    }//GEN-LAST:event_btnViewCarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteCar;
    private javax.swing.JButton btnViewCar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCar;
    // End of variables declaration//GEN-END:variables

    void populateTable(UberDirectory abc , String ff) {
            DefaultTableModel dtm = (DefaultTableModel) tblCar.getModel();
        dtm.setRowCount(0);
        for(Uber uber: uberDirectory.getCarList() ){
            
            if(uber.getCarBrand().equals(ff)|| ff.equals("ff"))
            {
            Object[] row = new Object[13];
            row[0] = uber;
            row[1] = uber.getCarBrand();
            row[2] = uber.getCarManufacturer();
            row[3] = uber.getCarManufacYear();
            row[4] = uber.getCarMinSeats();
            row[5] = uber.getCarMaxSeats();
            row[6] = uber.getCarSerialNum();
            row[7] = uber.getCarModelNum();
            row[8] = uber.getCarAvailableCity();
            row[9] = uber.getCarManufacturer();
            row[10] = uber.isCarAvailability();
            row[11] = uber.isCarMaintenanceCertificate();
            
            dtm.addRow(row);
        }

} 
    }

    private void populateTable(ArrayList<Uber> carList) {
        //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel dtm = (DefaultTableModel) tblCar.getModel();
        dtm.setRowCount(0);
        for(Uber uber: uberDirectory.getCarList() ){
            
            
            {
            Object[] row = new Object[13];
            row[0] = uber;
            row[1] = uber.getCarBrand();
            row[2] = uber.getCarManufacturer();
            row[3] = uber.getCarManufacYear();
            row[4] = uber.getCarMinSeats();
            row[5] = uber.getCarMaxSeats();
            row[6] = uber.getCarSerialNum();
            row[7] = uber.getCarModelNum();
            row[8] = uber.getCarAvailableCity();
            row[9] = uber.getCarManufacturer();
            row[10] = uber.isCarAvailability();
            row[11] = uber.isCarMaintenanceCertificate();
            
            dtm.addRow(row);
        }
    }
}
}
/*
    
    void populateTable(UberDirectory uberDirectory, String all) {
        DefaultTableModel dtm = (DefaultTableModel) tblCar.getModel();
        dtm.setRowCount(0);
        for(Uber uber: uberDirectory.getCarList())
        {
            if(uber.getCarName().equals(all) || all.equals("all")){
            Object[] row = new Object[13];
            row[0] = uber;
            row[1] = uber.getCarBrand();
            row[2] = uber.getCarManufacturer();
            row[3] = uber.getCarManufacYear();
            row[4] = uber.getCarMinSeats();
            row[5] = uber.getCarMaxSeats();
            row[6] = uber.getCarSerialNum();
            row[7] = uber.getCarModelNum();
            row[8] = uber.getCarAvailableCity();
            row[9] = uber.getCarManufacturer();
            row[10] = uber.isCarAvailability();
            row[11] = uber.isCarMaintenanceCertificate();
            
            dtm.addRow(row);
        }
                
        }
    }
   */
